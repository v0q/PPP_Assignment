/*
 Copyright © 2015 Teemu Lindborg
 SDAGE 1st year 2nd PPP Assignment
 Initial code © by Jon Macey
*/

#ifdef LINUX
  #include <GL/gl.h>
#endif
#ifdef DARWIN
  #include <OpenGL/gl.h>
#endif

#include <iostream>
#include <cmath>
#include <assert.h>

#include "NCCA/Vec4.h"
#include "Defs.h"

// ---------------------------------------------------------------------------------------
/// @file Vec4.cpp
/// @brief Implementation for simple Vec4 vector class
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
void Vec4::colourGL() const
{
  glColor4fv(m_openGL);
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
Vec4::Vec4(
           const Vec4 &_rhs
          )
{
  m_x = _rhs.m_x;
  m_y = _rhs.m_y;
  m_z = _rhs.m_z;
  m_w = _rhs.m_w;
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
Vec4 Vec4::cross(
                 const Vec4 &_rhs
                ) const
{
  return Vec4(
              m_y * _rhs.m_z - m_z * _rhs.m_y,
              m_z * _rhs.m_x - m_x * _rhs.m_z,
              m_x * _rhs.m_y - m_y * _rhs.m_x,
              m_w
              );
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
float Vec4::length() const
{
  return sqrt(m_x*m_x + m_y*m_y + m_z*m_z);
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
void Vec4::normalize()
{
  float l = length();
  assert(l != 0.0f);
  m_x /= l;
  m_y /= l;
  m_z /= l;
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
void Vec4::normalGL()
{
  glNormal3f(m_x, m_y, m_z);
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
void Vec4::normalInvGL()
{
  glNormal3f(-m_x, -m_y, -m_z);
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
void Vec4::vertexGL()
{
  glVertex3f(m_x, m_y, m_z);
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
void Vec4::textureGL()
{
  glTexCoord2f(m_x, m_y);
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
void Vec4::set(
               float _x,
               float _y,
               float _z,
               float _w
              )
{
  m_x = _x;
  m_y = _y;
  m_z = _z;
  m_w = _w;
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
float Vec4::dot(
                const Vec4 &_rhs
               ) const
{
  return m_x * _rhs.m_x + m_y * _rhs.m_y + m_z * _rhs.m_z;
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
Vec4 Vec4::operator -(
                      const Vec4 &_rhs
                     ) const
{
  return Vec4(
              m_x - _rhs.m_x,
              m_y - _rhs.m_y,
              m_z - _rhs.m_z,
              m_w
              );
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
Vec4 Vec4::operator +(
                      const Vec4 &_rhs
                     ) const
{
  return Vec4(
              m_x + _rhs.m_x,
              m_y + _rhs.m_y,
              m_z + _rhs.m_z,
              m_w
              );
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
void Vec4::operator +=(
                       const Vec4 &_rhs
                      )
{
  m_x += _rhs.m_x;
  m_y += _rhs.m_y;
  m_z += _rhs.m_z;
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
Vec4 Vec4::operator *(
                      const float _rhs
                     ) const
{
  return Vec4(
              m_x * _rhs,
              m_y * _rhs,
              m_z * _rhs,
              m_w);
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
void Vec4::operator *=(
                       const float _rhs
                      )
{
  m_x *= _rhs;
  m_y *= _rhs;
  m_z *= _rhs;
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
Vec4 Vec4::operator /(
                      const float _rhs
                     ) const
{
  return Vec4(
              m_x / _rhs,
              m_y / _rhs,
              m_z / _rhs,
              m_w);
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
bool Vec4::operator ==(
                       const Vec4 &_rhs
                      )
{
  return (m_x == _rhs.m_x &&
          m_y == _rhs.m_y &&
          m_z == _rhs.m_z &&
          m_w == _rhs.m_w ? true : false);
}
// ---------------------------------------------------------------------------------------
