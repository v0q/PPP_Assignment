/*
 Copyright © 2015 Teemu Lindborg
 SDAGE 1st year 2nd PPP Assignment
 Matrix class mostly © by Jonathan Macey
*/

#ifdef LINUX
  #include <GL/gl.h>
#endif
#ifdef DARWIN
  #include <OpenGL/gl.h>
#endif

#include <cstring> // For memcpy

#include "NCCA/Mat4.h"

// ---------------------------------------------------------------------------------------
/// @file Mat4.cpp
/// @brief Implementation for Mat4 matrix class
// ---------------------------------------------------------------------------------------


// ---------------------------------------------------------------------------------------
Mat4::Mat4(
           const float _s
          )
{
  memset(&m_m, 0, sizeof(m_m));
  m_00 = _s;
  m_11 = _s;
  m_22 = _s;
  m_33 = _s;
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
Mat4::Mat4(
           const Mat4 &_rhs
          )
{
  memcpy(m_m, &_rhs.m_m, sizeof(m_m));
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
void Mat4::operator *=(
                       const Mat4 &_rhs
                      )
{
  m_00 = m_m[0][0] * _rhs.m_m[0][0] + m_m[0][1] * _rhs.m_m[1][0] + m_m[0][2] * _rhs.m_m[2][0] +
         m_m[0][3] * _rhs.m_m[3][0];
  m_01 = m_m[0][0] * _rhs.m_m[0][1] + m_m[0][1] * _rhs.m_m[1][1] + m_m[0][2] * _rhs.m_m[2][1] +
         m_m[0][3] * _rhs.m_m[3][1];
  m_02 = m_m[0][0] * _rhs.m_m[0][2] + m_m[0][1] * _rhs.m_m[1][2] + m_m[0][2] * _rhs.m_m[2][2] +
         m_m[0][3] * _rhs.m_m[3][2];
  m_03 = m_m[0][0] * _rhs.m_m[0][3] + m_m[0][1] * _rhs.m_m[1][3] + m_m[0][2] * _rhs.m_m[2][3] +
         m_m[0][3] * _rhs.m_m[3][3];

  m_10 = m_m[1][0] * _rhs.m_m[0][0] + m_m[1][1] * _rhs.m_m[1][0] + m_m[1][2] * _rhs.m_m[2][0] +
         m_m[1][3] * _rhs.m_m[3][0];
  m_11 = m_m[1][0] * _rhs.m_m[0][1] + m_m[1][1] * _rhs.m_m[1][1] + m_m[1][2] * _rhs.m_m[2][1] +
         m_m[1][3] * _rhs.m_m[3][1];
  m_12 = m_m[1][0] * _rhs.m_m[0][2] + m_m[1][1] * _rhs.m_m[1][2] + m_m[1][2] * _rhs.m_m[2][2] +
         m_m[1][3] * _rhs.m_m[3][2];
  m_13 = m_m[1][0] * _rhs.m_m[0][3] + m_m[1][1] * _rhs.m_m[1][3] + m_m[1][2] * _rhs.m_m[2][3] +
         m_m[1][3] * _rhs.m_m[3][3];

  m_20 = m_m[2][0] * _rhs.m_m[0][0] + m_m[2][1] * _rhs.m_m[1][0] + m_m[2][2] * _rhs.m_m[2][0] +
         m_m[2][3] * _rhs.m_m[3][0];
  m_21 = m_m[2][0] * _rhs.m_m[0][1] + m_m[2][1] * _rhs.m_m[1][1] + m_m[2][2] * _rhs.m_m[2][1] +
         m_m[2][3] * _rhs.m_m[3][1];
  m_22 = m_m[2][0] * _rhs.m_m[0][2] + m_m[2][1] * _rhs.m_m[1][2] + m_m[2][2] * _rhs.m_m[2][2] +
         m_m[2][3] * _rhs.m_m[3][2];
  m_23 = m_m[2][0] * _rhs.m_m[0][3] + m_m[2][1] * _rhs.m_m[1][3] + m_m[2][2] * _rhs.m_m[2][3] +
         m_m[2][3] * _rhs.m_m[3][3];

  m_30 = m_m[3][0] * _rhs.m_m[0][0] + m_m[3][1] * _rhs.m_m[1][0] + m_m[3][2] * _rhs.m_m[2][0] +
         m_m[3][3] * _rhs.m_m[3][0];
  m_31 = m_m[3][0] * _rhs.m_m[0][1] + m_m[3][1] * _rhs.m_m[1][1] + m_m[3][2] * _rhs.m_m[2][1] +
         m_m[3][3] * _rhs.m_m[3][1];
  m_32 = m_m[3][0] * _rhs.m_m[0][2] + m_m[3][1] * _rhs.m_m[1][2] + m_m[3][2] * _rhs.m_m[2][2] +
         m_m[3][3] * _rhs.m_m[3][2];
  m_33 = m_m[3][0] * _rhs.m_m[0][3] + m_m[3][1] * _rhs.m_m[1][3] + m_m[3][2] * _rhs.m_m[2][3] +
         m_m[3][3] * _rhs.m_m[3][3];
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
Mat4 Mat4::operator *(
                      const double &_rhs
                     )
{
  Mat4 r;
  r.m_00 = m_00 * _rhs;
  r.m_01 = m_01 * _rhs;
  r.m_02 = m_02 * _rhs;
  r.m_03 = m_03 * _rhs;
  r.m_10 = m_10 * _rhs;
  r.m_11 = m_11 * _rhs;
  r.m_12 = m_12 * _rhs;
  r.m_13 = m_13 * _rhs;
  r.m_20 = m_20 * _rhs;
  r.m_21 = m_21 * _rhs;
  r.m_22 = m_22 * _rhs;
  r.m_23 = m_23 * _rhs;
  r.m_30 = m_30 * _rhs;
  r.m_31 = m_31 * _rhs;
  r.m_32 = m_32 * _rhs;
  r.m_33 = m_33 * _rhs;

  return r;
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
void Mat4::normalize()
{
  float c_1, c_2, c_3, c_4;
  c_1 = m_m[0][0] + m_m[1][0] + m_m[2][0] + m_m[3][0];
  c_2 = m_m[0][1] + m_m[1][1] + m_m[2][1] + m_m[3][1];
  c_3 = m_m[0][2] + m_m[1][2] + m_m[2][2] + m_m[3][2];
  c_4 = m_m[0][3] + m_m[1][3] + m_m[2][3] + m_m[3][3];

  m_00 /= c_1;
  m_01 /= c_2;
  m_02 /= c_3;
  m_03 /= c_4;
  m_10 /= c_1;
  m_11 /= c_2;
  m_12 /= c_3;
  m_13 /= c_4;
  m_20 /= c_1;
  m_21 /= c_2;
  m_22 /= c_3;
  m_23 /= c_4;
  m_30 /= c_1;
  m_31 /= c_2;
  m_32 /= c_3;
  m_33 /= c_4;
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
void Mat4::identity()
{
  memset(&m_m, 0, sizeof(m_m));
  m_00 = 1.0f;
  m_11 = 1.0f;
  m_22 = 1.0f;
  m_33 = 1.0f;
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
void Mat4::loadProjection() const
{
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  glMultMatrixf(m_openGL);
  glMatrixMode(GL_MODELVIEW);
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
void Mat4::loadModelView() const
{
  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();
  glMultMatrixf(m_openGL);
}
// ---------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------
const Mat4& Mat4::transpose()
{
  Mat4 tmp(*this);

  for(int row=0; row<4; row++)
  {
    for(int col=0; col<4; col++)
    {
      m_m[row][col]=tmp.m_m[col][row];
    }
  }
  return *this;
}
// ---------------------------------------------------------------------------------------
